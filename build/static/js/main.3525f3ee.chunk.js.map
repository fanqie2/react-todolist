{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","index","completeTodo","removeTodo","_useState","useState","_useState2","Object","slicedToArray","show","setShow","react_default","a","createElement","className","style","isCompleted","textDecoration","color","onClick","text","e","background","transform","btnText","opacity","visibility","title","TodoForm","_ref2","addTodo","_useState3","_useState4","value","setValue","onSubmit","preventDefault","type","onChange","target","App","_useState5","_useState6","todos","setTodos","stopPropagation","newTodos","toConsumableArray","splice","concat","map","App_Todo","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3525f3ee.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport './App.css'\r\nimport { format } from 'path';\r\n\r\nconst Todo= ({todo,index,completeTodo,removeTodo})=>{\r\n    const completeStyle = {\r\n        textDecoration:'line-through',\r\n        color:'rgba(22,22,22,0.3)'\r\n    }\r\n\r\n    const dltShow = {\r\n        opacity:1,\r\n        visibility:'visible',\r\n        transform:'translateX(-20px)'\r\n    }\r\n\r\n    const [show,setShow]=useState(false)\r\n\r\n    const showDlt = ()=>{\r\n        setShow(!show)\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\"\r\n             style={todo.isCompleted?completeStyle:{}}\r\n             onClick={()=>showDlt()}>\r\n            <p>\r\n                {todo.text}\r\n            </p>\r\n             \r\n\r\n            <div>\r\n                <button onClick={(e)=>completeTodo(index,e)} className=\"complete\"\r\n                        style={{background:todo.isCompleted?\"#39cf5a\":\"#ff5722\",\r\n                                transform:show?\"translateX(-50px)\":null}}\r\n                >\r\n                    {todo.btnText}\r\n                </button>\r\n\r\n                <button onClick={()=>removeTodo(index)} className=\"dlt\"\r\n                        style={show?dltShow:{}} title=\"删除\">\r\n                        <i className=\"iconfont icon-shanchu\"></i>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction TodoForm({addTodo}){\r\n    const[value,setValue] = useState(\"\");\r\n\r\n    const handleSubmit= e =>{\r\n        e.preventDefault();\r\n        if(!value) return;\r\n        addTodo(value);\r\n        setValue(\"\");\r\n    };\r\n\r\n    return(\r\n        <form onSubmit ={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                className=\"input\"\r\n                value={value}\r\n                onChange={e=>setValue(e.target.value)}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nfunction App(){\r\n    const [todos,setTodos] = useState([\r\n        {\r\n            text:\"learn about React\",\r\n            isCompleted:false ,\r\n            btnText:'待完成'\r\n        },\r\n        {\r\n            text:\"Meet friend for lunch\",\r\n            isCompleted:false ,\r\n            btnText:'待完成'\r\n        },\r\n        {   \r\n            text:\"Build really cool todo app\",\r\n            isCompleted:false ,\r\n            btnText:'待完成'\r\n    }\r\n    ]);\r\n\r\n    //通过参数把数据传来传去\r\n    const addTodo = text=>{\r\n        \r\n        const newTodos = [{text,isCompleted:false,btnText:'待完成'},...todos];\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const completeTodo = (index,e)=>{\r\n        // e.nativeEvent.stopImmediatePropagation();\r\n        e.stopPropagation();\r\n        const newTodos = [...todos];\r\n        newTodos[index].isCompleted= !todos[index].isCompleted;\r\n        newTodos[index].btnText===\"待完成\"?newTodos[index].btnText='已完成' :newTodos[index].btnText='待完成' \r\n        setTodos(newTodos);\r\n    }\r\n\r\n    const removeTodo = index=>{\r\n        const newTodos = [...todos];\r\n        newTodos.splice(index,1);\r\n        setTodos(newTodos);\r\n    }\r\n\r\n    return(\r\n        <div className=\"App\">\r\n            <div className=\"todo-list\">\r\n            <TodoForm addTodo={addTodo} />\r\n                {todos.map((todo,index)=>(\r\n                    <Todo\r\n                        key={index}\r\n                        index={index}\r\n                        todo={todo} \r\n                        completeTodo={completeTodo}\r\n                        removeTodo = {removeTodo}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();"],"sourceRoot":""}